/* how to solve a systme using KLU */

    klu_common Common ;
    klu_defaults (&Common) ;
    Symbolic = klu_analyze (n, Ap, Ai, &Common) ;
    Numeric = klu_factor (Ap, Ai, Ax, Symbolic, &Common) ;
    klu_solve (Symbolic, Numeric, 5, 1, b, &Common) ;
    klu_free_symbolic (&Symbolic, &Common) ;
    klu_free_numeric (&Numeric, &Common) ; 


/* how to use the Concise Sparse matrix */

#include "cs.h"
int main (void)
{
    cs *T, *A, *Eye, *AT, *C, *D ;
    int i, m ;
    T = cs_load (stdin) ;		/* load triplet matrix T from stdin */
    printf ("T:\n") ; cs_print (T, 0) ;	/* print T */
    A = cs_compress (T) ;		/* A = compressed-column form of T */
    printf ("A:\n") ; cs_print (A, 0) ;	/* print A */
    cs_spfree (T) ;			/* clear T */
    AT = cs_transpose (A, 1) ;		/* AT = A' */
    printf ("AT:\n") ; cs_print (AT, 0) ; /* print AT */
    m = A ? A->m : 0 ;			/* m = # of rows of A */
    T = cs_spalloc (m, m, m, 1, 1) ;	/* create triplet identity matrix */
    for (i = 0 ; i < m ; i++) cs_entry (T, i, i, 1) ;
/* print out T --liyang */
    printf("T:\n");
    cs_print(T, 0);
/* print out T */
    Eye = cs_compress (T) ;		/* Eye = speye (m) */
    cs_spfree (T) ;
    C = cs_multiply (A, AT) ;		/* C = A*A' */
    D = cs_add (C, Eye, 1, cs_norm (C)) ;   /* D = C + Eye*norm (C,1) */
    printf ("D:\n") ; cs_print (D, 0) ;	/* print D */
    cs_spfree (A) ;			/* clear A AT C D Eye */
    cs_spfree (AT) ;
    cs_spfree (C) ;
    cs_spfree (D) ;
    cs_spfree (Eye) ;
    return (0) ;
}

/* how to using CSparse & KLU */

	cs_spfree (triplet);
	n = A->n;
	Ap = A->p;
	Ai = A->i;
	Ax = A->x;

	/* read the RHS, but pre-load the default value as 1st column from A */
	if (isreal) {
		rhs = cs_malloc (n, sizeof (double));
		for (i = 0; i < n; i++) rhs[i] = 0.0;
		for (p = Ap[0]; p < Ap[1]; p++) {
			i = Ai[p];
			rhs[i] = Ax[p];
		}
	} else {
		rhs = cs_malloc (2 * n, sizeof (double));
		for (i = 0; i < 2 * n; i++) rhs[i] = 0.0;
		for (p = Ap[0]; p < Ap[1]; p++) {
			i = Ai[p];
			rhs[2*i] = Ax[2*p];
			rhs[2*i + 1] = Ax[2*p + 1];
		}
	}
	read_kundert_source (fp, rhs, n, isreal);

	/* solve it */
	rnorm = 0.0;
	klu_defaults (&Common);
	Common.halt_if_singular = 0; // only for testing
    Symbolic = klu_analyze (n, Ap, Ai, &Common);
	if (isreal) {
	    Numeric = klu_factor (Ap, Ai, Ax, Symbolic, &Common);
		klu_solve (Symbolic, Numeric, n, 1, rhs, &Common);

		klu_rgrowth (Ap, Ai, Ax, Symbolic, Numeric, &Common);
		if (n > 1) klu_condest (Ap, Ax, Symbolic, Numeric, &Common);
		klu_rcond (Symbolic, Numeric, &Common);
		klu_flops (Symbolic, Numeric, &Common);
		lunz = Numeric->lnz + Numeric->unz - n + 
			((Numeric->Offp) ? (Numeric->Offp [n]) : 0);
		printf ("n %d nnz(A) %d nnz(L+U+F) %d resid %g\n"
			"recip growth %g condest %g rcond %g flops %g\n",
			n, Ap [n], lunz, rnorm, Common.rgrowth, Common.condest,
			Common.rcond, Common.flops);

	    klu_free_numeric (&Numeric, &Common);
	} else {
	    Numeric = klu_z_factor (Ap, Ai, Ax, Symbolic, &Common);
		klu_z_solve (Symbolic, Numeric, n, 1, rhs, &Common);

		klu_z_rgrowth (Ap, Ai, Ax, Symbolic, Numeric, &Common);
		if (n > 1) klu_z_condest (Ap, Ax, Symbolic, Numeric, &Common);
		klu_z_rcond (Symbolic, Numeric, &Common);
		klu_z_flops (Symbolic, Numeric, &Common);
		lunz = Numeric->lnz + Numeric->unz - n + 
			((Numeric->Offp) ? (Numeric->Offp [n]) : 0);
		printf ("n %d nnz(A) %d nnz(L+U+F) %d resid %g\n"
			"recip growth %g condest %g rcond %g flops %g\n",
			n, Ap [n], lunz, rnorm, Common.rgrowth, Common.condest,
			Common.rcond, Common.flops);

		klu_z_free_numeric (&Numeric, &Common);
	}
    klu_free_symbolic (&Symbolic, &Common);
